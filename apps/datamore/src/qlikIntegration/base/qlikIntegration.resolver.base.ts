/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QlikIntegration } from "./QlikIntegration";
import { QlikIntegrationCountArgs } from "./QlikIntegrationCountArgs";
import { QlikIntegrationFindManyArgs } from "./QlikIntegrationFindManyArgs";
import { QlikIntegrationFindUniqueArgs } from "./QlikIntegrationFindUniqueArgs";
import { CreateQlikIntegrationArgs } from "./CreateQlikIntegrationArgs";
import { UpdateQlikIntegrationArgs } from "./UpdateQlikIntegrationArgs";
import { DeleteQlikIntegrationArgs } from "./DeleteQlikIntegrationArgs";
import { QlikWorkspaceFindManyArgs } from "../../qlikWorkspace/base/QlikWorkspaceFindManyArgs";
import { QlikWorkspace } from "../../qlikWorkspace/base/QlikWorkspace";
import { QlikIntegrationService } from "../qlikIntegration.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QlikIntegration)
export class QlikIntegrationResolverBase {
  constructor(
    protected readonly service: QlikIntegrationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QlikIntegration",
    action: "read",
    possession: "any",
  })
  async _qlikIntegrationsMeta(
    @graphql.Args() args: QlikIntegrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QlikIntegration])
  @nestAccessControl.UseRoles({
    resource: "QlikIntegration",
    action: "read",
    possession: "any",
  })
  async qlikIntegrations(
    @graphql.Args() args: QlikIntegrationFindManyArgs
  ): Promise<QlikIntegration[]> {
    return this.service.qlikIntegrations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QlikIntegration, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QlikIntegration",
    action: "read",
    possession: "own",
  })
  async qlikIntegration(
    @graphql.Args() args: QlikIntegrationFindUniqueArgs
  ): Promise<QlikIntegration | null> {
    const result = await this.service.qlikIntegration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QlikIntegration)
  @nestAccessControl.UseRoles({
    resource: "QlikIntegration",
    action: "create",
    possession: "any",
  })
  async createQlikIntegration(
    @graphql.Args() args: CreateQlikIntegrationArgs
  ): Promise<QlikIntegration> {
    return await this.service.createQlikIntegration({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QlikIntegration)
  @nestAccessControl.UseRoles({
    resource: "QlikIntegration",
    action: "update",
    possession: "any",
  })
  async updateQlikIntegration(
    @graphql.Args() args: UpdateQlikIntegrationArgs
  ): Promise<QlikIntegration | null> {
    try {
      return await this.service.updateQlikIntegration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QlikIntegration)
  @nestAccessControl.UseRoles({
    resource: "QlikIntegration",
    action: "delete",
    possession: "any",
  })
  async deleteQlikIntegration(
    @graphql.Args() args: DeleteQlikIntegrationArgs
  ): Promise<QlikIntegration | null> {
    try {
      return await this.service.deleteQlikIntegration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QlikWorkspace], { name: "qlikWorkspaces" })
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "read",
    possession: "any",
  })
  async findQlikWorkspaces(
    @graphql.Parent() parent: QlikIntegration,
    @graphql.Args() args: QlikWorkspaceFindManyArgs
  ): Promise<QlikWorkspace[]> {
    const results = await this.service.findQlikWorkspaces(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
