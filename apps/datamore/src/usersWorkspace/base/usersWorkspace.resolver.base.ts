/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UsersWorkspace } from "./UsersWorkspace";
import { UsersWorkspaceCountArgs } from "./UsersWorkspaceCountArgs";
import { UsersWorkspaceFindManyArgs } from "./UsersWorkspaceFindManyArgs";
import { UsersWorkspaceFindUniqueArgs } from "./UsersWorkspaceFindUniqueArgs";
import { CreateUsersWorkspaceArgs } from "./CreateUsersWorkspaceArgs";
import { UpdateUsersWorkspaceArgs } from "./UpdateUsersWorkspaceArgs";
import { DeleteUsersWorkspaceArgs } from "./DeleteUsersWorkspaceArgs";
import { User } from "../../user/base/User";
import { Workspace } from "../../workspace/base/Workspace";
import { UsersWorkspaceService } from "../usersWorkspace.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UsersWorkspace)
export class UsersWorkspaceResolverBase {
  constructor(
    protected readonly service: UsersWorkspaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UsersWorkspace",
    action: "read",
    possession: "any",
  })
  async _usersWorkspacesMeta(
    @graphql.Args() args: UsersWorkspaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UsersWorkspace])
  @nestAccessControl.UseRoles({
    resource: "UsersWorkspace",
    action: "read",
    possession: "any",
  })
  async usersWorkspaces(
    @graphql.Args() args: UsersWorkspaceFindManyArgs
  ): Promise<UsersWorkspace[]> {
    return this.service.usersWorkspaces(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UsersWorkspace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UsersWorkspace",
    action: "read",
    possession: "own",
  })
  async usersWorkspace(
    @graphql.Args() args: UsersWorkspaceFindUniqueArgs
  ): Promise<UsersWorkspace | null> {
    const result = await this.service.usersWorkspace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsersWorkspace)
  @nestAccessControl.UseRoles({
    resource: "UsersWorkspace",
    action: "create",
    possession: "any",
  })
  async createUsersWorkspace(
    @graphql.Args() args: CreateUsersWorkspaceArgs
  ): Promise<UsersWorkspace> {
    return await this.service.createUsersWorkspace({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        workspace: args.data.workspace
          ? {
              connect: args.data.workspace,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsersWorkspace)
  @nestAccessControl.UseRoles({
    resource: "UsersWorkspace",
    action: "update",
    possession: "any",
  })
  async updateUsersWorkspace(
    @graphql.Args() args: UpdateUsersWorkspaceArgs
  ): Promise<UsersWorkspace | null> {
    try {
      return await this.service.updateUsersWorkspace({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          workspace: args.data.workspace
            ? {
                connect: args.data.workspace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsersWorkspace)
  @nestAccessControl.UseRoles({
    resource: "UsersWorkspace",
    action: "delete",
    possession: "any",
  })
  async deleteUsersWorkspace(
    @graphql.Args() args: DeleteUsersWorkspaceArgs
  ): Promise<UsersWorkspace | null> {
    try {
      return await this.service.deleteUsersWorkspace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: UsersWorkspace
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Workspace, {
    nullable: true,
    name: "workspace",
  })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async getWorkspace(
    @graphql.Parent() parent: UsersWorkspace
  ): Promise<Workspace | null> {
    const result = await this.service.getWorkspace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
