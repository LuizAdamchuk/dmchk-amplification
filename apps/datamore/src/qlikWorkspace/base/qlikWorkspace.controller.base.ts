/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QlikWorkspaceService } from "../qlikWorkspace.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QlikWorkspaceCreateInput } from "./QlikWorkspaceCreateInput";
import { QlikWorkspace } from "./QlikWorkspace";
import { QlikWorkspaceFindManyArgs } from "./QlikWorkspaceFindManyArgs";
import { QlikWorkspaceWhereUniqueInput } from "./QlikWorkspaceWhereUniqueInput";
import { QlikWorkspaceUpdateInput } from "./QlikWorkspaceUpdateInput";
import { QlikIntegrationFindManyArgs } from "../../qlikIntegration/base/QlikIntegrationFindManyArgs";
import { QlikIntegration } from "../../qlikIntegration/base/QlikIntegration";
import { QlikIntegrationWhereUniqueInput } from "../../qlikIntegration/base/QlikIntegrationWhereUniqueInput";
import { WorkspaceFindManyArgs } from "../../workspace/base/WorkspaceFindManyArgs";
import { Workspace } from "../../workspace/base/Workspace";
import { WorkspaceWhereUniqueInput } from "../../workspace/base/WorkspaceWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QlikWorkspaceControllerBase {
  constructor(
    protected readonly service: QlikWorkspaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QlikWorkspace })
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createQlikWorkspace(
    @common.Body() data: QlikWorkspaceCreateInput
  ): Promise<QlikWorkspace> {
    return await this.service.createQlikWorkspace({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QlikWorkspace] })
  @ApiNestedQuery(QlikWorkspaceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async qlikWorkspaces(
    @common.Req() request: Request
  ): Promise<QlikWorkspace[]> {
    const args = plainToClass(QlikWorkspaceFindManyArgs, request.query);
    return this.service.qlikWorkspaces({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QlikWorkspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async qlikWorkspace(
    @common.Param() params: QlikWorkspaceWhereUniqueInput
  ): Promise<QlikWorkspace | null> {
    const result = await this.service.qlikWorkspace({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QlikWorkspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateQlikWorkspace(
    @common.Param() params: QlikWorkspaceWhereUniqueInput,
    @common.Body() data: QlikWorkspaceUpdateInput
  ): Promise<QlikWorkspace | null> {
    try {
      return await this.service.updateQlikWorkspace({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QlikWorkspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQlikWorkspace(
    @common.Param() params: QlikWorkspaceWhereUniqueInput
  ): Promise<QlikWorkspace | null> {
    try {
      return await this.service.deleteQlikWorkspace({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/qlikintegration")
  @ApiNestedQuery(QlikIntegrationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QlikIntegration",
    action: "read",
    possession: "any",
  })
  async findQlikintegration(
    @common.Req() request: Request,
    @common.Param() params: QlikWorkspaceWhereUniqueInput
  ): Promise<QlikIntegration[]> {
    const query = plainToClass(QlikIntegrationFindManyArgs, request.query);
    const results = await this.service.findQlikintegration(params.id, {
      ...query,
      select: {
        alias: true,
        createdAt: true,
        domain: true,
        id: true,
        issuer: true,
        keyId: true,
        qlikId: true,
        qlikTheme: true,
        qlikWebIntegrationId: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/qlikintegration")
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "update",
    possession: "any",
  })
  async connectQlikintegration(
    @common.Param() params: QlikWorkspaceWhereUniqueInput,
    @common.Body() body: QlikIntegrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qlikintegration: {
        connect: body,
      },
    };
    await this.service.updateQlikWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/qlikintegration")
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "update",
    possession: "any",
  })
  async updateQlikintegration(
    @common.Param() params: QlikWorkspaceWhereUniqueInput,
    @common.Body() body: QlikIntegrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qlikintegration: {
        set: body,
      },
    };
    await this.service.updateQlikWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/qlikintegration")
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "update",
    possession: "any",
  })
  async disconnectQlikintegration(
    @common.Param() params: QlikWorkspaceWhereUniqueInput,
    @common.Body() body: QlikIntegrationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qlikintegration: {
        disconnect: body,
      },
    };
    await this.service.updateQlikWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workspace")
  @ApiNestedQuery(WorkspaceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async findWorkspace(
    @common.Req() request: Request,
    @common.Param() params: QlikWorkspaceWhereUniqueInput
  ): Promise<Workspace[]> {
    const query = plainToClass(WorkspaceFindManyArgs, request.query);
    const results = await this.service.findWorkspace(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        slug: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workspace")
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "update",
    possession: "any",
  })
  async connectWorkspace(
    @common.Param() params: QlikWorkspaceWhereUniqueInput,
    @common.Body() body: WorkspaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workspace: {
        connect: body,
      },
    };
    await this.service.updateQlikWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workspace")
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "update",
    possession: "any",
  })
  async updateWorkspace(
    @common.Param() params: QlikWorkspaceWhereUniqueInput,
    @common.Body() body: WorkspaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workspace: {
        set: body,
      },
    };
    await this.service.updateQlikWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workspace")
  @nestAccessControl.UseRoles({
    resource: "QlikWorkspace",
    action: "update",
    possession: "any",
  })
  async disconnectWorkspace(
    @common.Param() params: QlikWorkspaceWhereUniqueInput,
    @common.Body() body: WorkspaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workspace: {
        disconnect: body,
      },
    };
    await this.service.updateQlikWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }
}
