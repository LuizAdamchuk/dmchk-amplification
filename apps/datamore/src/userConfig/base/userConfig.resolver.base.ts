/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserConfig } from "./UserConfig";
import { UserConfigCountArgs } from "./UserConfigCountArgs";
import { UserConfigFindManyArgs } from "./UserConfigFindManyArgs";
import { UserConfigFindUniqueArgs } from "./UserConfigFindUniqueArgs";
import { CreateUserConfigArgs } from "./CreateUserConfigArgs";
import { UpdateUserConfigArgs } from "./UpdateUserConfigArgs";
import { DeleteUserConfigArgs } from "./DeleteUserConfigArgs";
import { User } from "../../user/base/User";
import { UserConfigService } from "../userConfig.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserConfig)
export class UserConfigResolverBase {
  constructor(
    protected readonly service: UserConfigService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserConfig",
    action: "read",
    possession: "any",
  })
  async _userConfigsMeta(
    @graphql.Args() args: UserConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserConfig])
  @nestAccessControl.UseRoles({
    resource: "UserConfig",
    action: "read",
    possession: "any",
  })
  async userConfigs(
    @graphql.Args() args: UserConfigFindManyArgs
  ): Promise<UserConfig[]> {
    return this.service.userConfigs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserConfig, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserConfig",
    action: "read",
    possession: "own",
  })
  async userConfig(
    @graphql.Args() args: UserConfigFindUniqueArgs
  ): Promise<UserConfig | null> {
    const result = await this.service.userConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserConfig)
  @nestAccessControl.UseRoles({
    resource: "UserConfig",
    action: "create",
    possession: "any",
  })
  async createUserConfig(
    @graphql.Args() args: CreateUserConfigArgs
  ): Promise<UserConfig> {
    return await this.service.createUserConfig({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserConfig)
  @nestAccessControl.UseRoles({
    resource: "UserConfig",
    action: "update",
    possession: "any",
  })
  async updateUserConfig(
    @graphql.Args() args: UpdateUserConfigArgs
  ): Promise<UserConfig | null> {
    try {
      return await this.service.updateUserConfig({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserConfig)
  @nestAccessControl.UseRoles({
    resource: "UserConfig",
    action: "delete",
    possession: "any",
  })
  async deleteUserConfig(
    @graphql.Args() args: DeleteUserConfigArgs
  ): Promise<UserConfig | null> {
    try {
      return await this.service.deleteUserConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserConfig): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
