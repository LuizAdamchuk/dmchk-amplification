/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OrganizationsWorkspace as PrismaOrganizationsWorkspace,
  Organization as PrismaOrganization,
  Workspace as PrismaWorkspace,
} from "@prisma/client";

export class OrganizationsWorkspaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrganizationsWorkspaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.organizationsWorkspace.count(args);
  }

  async organizationsWorkspaces<
    T extends Prisma.OrganizationsWorkspaceFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsWorkspaceFindManyArgs>
  ): Promise<PrismaOrganizationsWorkspace[]> {
    return this.prisma.organizationsWorkspace.findMany<Prisma.OrganizationsWorkspaceFindManyArgs>(
      args
    );
  }
  async organizationsWorkspace<
    T extends Prisma.OrganizationsWorkspaceFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsWorkspaceFindUniqueArgs>
  ): Promise<PrismaOrganizationsWorkspace | null> {
    return this.prisma.organizationsWorkspace.findUnique(args);
  }
  async createOrganizationsWorkspace<
    T extends Prisma.OrganizationsWorkspaceCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsWorkspaceCreateArgs>
  ): Promise<PrismaOrganizationsWorkspace> {
    return this.prisma.organizationsWorkspace.create<T>(args);
  }
  async updateOrganizationsWorkspace<
    T extends Prisma.OrganizationsWorkspaceUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsWorkspaceUpdateArgs>
  ): Promise<PrismaOrganizationsWorkspace> {
    return this.prisma.organizationsWorkspace.update<T>(args);
  }
  async deleteOrganizationsWorkspace<
    T extends Prisma.OrganizationsWorkspaceDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OrganizationsWorkspaceDeleteArgs>
  ): Promise<PrismaOrganizationsWorkspace> {
    return this.prisma.organizationsWorkspace.delete(args);
  }

  async findOrganization(
    parentId: string,
    args: Prisma.OrganizationFindManyArgs
  ): Promise<PrismaOrganization[]> {
    return this.prisma.organizationsWorkspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .organization(args);
  }

  async findWorkspace(
    parentId: string,
    args: Prisma.WorkspaceFindManyArgs
  ): Promise<PrismaWorkspace[]> {
    return this.prisma.organizationsWorkspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workspace(args);
  }
}
