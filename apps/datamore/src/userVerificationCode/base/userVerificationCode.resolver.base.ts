/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserVerificationCode } from "./UserVerificationCode";
import { UserVerificationCodeCountArgs } from "./UserVerificationCodeCountArgs";
import { UserVerificationCodeFindManyArgs } from "./UserVerificationCodeFindManyArgs";
import { UserVerificationCodeFindUniqueArgs } from "./UserVerificationCodeFindUniqueArgs";
import { CreateUserVerificationCodeArgs } from "./CreateUserVerificationCodeArgs";
import { UpdateUserVerificationCodeArgs } from "./UpdateUserVerificationCodeArgs";
import { DeleteUserVerificationCodeArgs } from "./DeleteUserVerificationCodeArgs";
import { User } from "../../user/base/User";
import { UserVerificationCodeService } from "../userVerificationCode.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserVerificationCode)
export class UserVerificationCodeResolverBase {
  constructor(
    protected readonly service: UserVerificationCodeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserVerificationCode",
    action: "read",
    possession: "any",
  })
  async _userVerificationCodesMeta(
    @graphql.Args() args: UserVerificationCodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserVerificationCode])
  @nestAccessControl.UseRoles({
    resource: "UserVerificationCode",
    action: "read",
    possession: "any",
  })
  async userVerificationCodes(
    @graphql.Args() args: UserVerificationCodeFindManyArgs
  ): Promise<UserVerificationCode[]> {
    return this.service.userVerificationCodes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserVerificationCode, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserVerificationCode",
    action: "read",
    possession: "own",
  })
  async userVerificationCode(
    @graphql.Args() args: UserVerificationCodeFindUniqueArgs
  ): Promise<UserVerificationCode | null> {
    const result = await this.service.userVerificationCode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserVerificationCode)
  @nestAccessControl.UseRoles({
    resource: "UserVerificationCode",
    action: "create",
    possession: "any",
  })
  async createUserVerificationCode(
    @graphql.Args() args: CreateUserVerificationCodeArgs
  ): Promise<UserVerificationCode> {
    return await this.service.createUserVerificationCode({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserVerificationCode)
  @nestAccessControl.UseRoles({
    resource: "UserVerificationCode",
    action: "update",
    possession: "any",
  })
  async updateUserVerificationCode(
    @graphql.Args() args: UpdateUserVerificationCodeArgs
  ): Promise<UserVerificationCode | null> {
    try {
      return await this.service.updateUserVerificationCode({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserVerificationCode)
  @nestAccessControl.UseRoles({
    resource: "UserVerificationCode",
    action: "delete",
    possession: "any",
  })
  async deleteUserVerificationCode(
    @graphql.Args() args: DeleteUserVerificationCodeArgs
  ): Promise<UserVerificationCode | null> {
    try {
      return await this.service.deleteUserVerificationCode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: UserVerificationCode
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
