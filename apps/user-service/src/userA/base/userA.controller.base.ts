/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserAService } from "../userA.service";
import { UserACreateInput } from "./UserACreateInput";
import { UserA } from "./UserA";
import { UserAFindManyArgs } from "./UserAFindManyArgs";
import { UserAWhereUniqueInput } from "./UserAWhereUniqueInput";
import { UserAUpdateInput } from "./UserAUpdateInput";
import { MfeFindManyArgs } from "../../mfe/base/MfeFindManyArgs";
import { Mfe } from "../../mfe/base/Mfe";
import { MfeWhereUniqueInput } from "../../mfe/base/MfeWhereUniqueInput";

export class UserAControllerBase {
  constructor(protected readonly service: UserAService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserA })
  async createUserA(@common.Body() data: UserACreateInput): Promise<UserA> {
    return await this.service.createUserA({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserA] })
  @ApiNestedQuery(UserAFindManyArgs)
  async userAS(@common.Req() request: Request): Promise<UserA[]> {
    const args = plainToClass(UserAFindManyArgs, request.query);
    return this.service.userAS({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserA })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userA(
    @common.Param() params: UserAWhereUniqueInput
  ): Promise<UserA | null> {
    const result = await this.service.userA({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserA })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserA(
    @common.Param() params: UserAWhereUniqueInput,
    @common.Body() data: UserAUpdateInput
  ): Promise<UserA | null> {
    try {
      return await this.service.updateUserA({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserA })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserA(
    @common.Param() params: UserAWhereUniqueInput
  ): Promise<UserA | null> {
    try {
      return await this.service.deleteUserA({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/mfes")
  @ApiNestedQuery(MfeFindManyArgs)
  async findMfes(
    @common.Req() request: Request,
    @common.Param() params: UserAWhereUniqueInput
  ): Promise<Mfe[]> {
    const query = plainToClass(MfeFindManyArgs, request.query);
    const results = await this.service.findMfes(params.id, {
      ...query,
      select: {
        active: true,
        authenticationRequired: true,
        createdAt: true,
        description: true,
        id: true,
        key: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mfes")
  async connectMfes(
    @common.Param() params: UserAWhereUniqueInput,
    @common.Body() body: MfeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mfes: {
        connect: body,
      },
    };
    await this.service.updateUserA({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mfes")
  async updateMfes(
    @common.Param() params: UserAWhereUniqueInput,
    @common.Body() body: MfeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mfes: {
        set: body,
      },
    };
    await this.service.updateUserA({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mfes")
  async disconnectMfes(
    @common.Param() params: UserAWhereUniqueInput,
    @common.Body() body: MfeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mfes: {
        disconnect: body,
      },
    };
    await this.service.updateUserA({
      where: params,
      data,
      select: { id: true },
    });
  }
}
