/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserA, // @ts-ignore
  Mfe,
} from "@prisma/client";

export class UserAServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserACountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserACountArgs>
  ): Promise<number> {
    return this.prisma.userA.count(args);
  }

  async userAS<T extends Prisma.UserAFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAFindManyArgs>
  ): Promise<UserA[]> {
    return this.prisma.userA.findMany(args);
  }
  async userA<T extends Prisma.UserAFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAFindUniqueArgs>
  ): Promise<UserA | null> {
    return this.prisma.userA.findUnique(args);
  }
  async createUserA<T extends Prisma.UserACreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserACreateArgs>
  ): Promise<UserA> {
    return this.prisma.userA.create<T>(args);
  }
  async updateUserA<T extends Prisma.UserAUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAUpdateArgs>
  ): Promise<UserA> {
    return this.prisma.userA.update<T>(args);
  }
  async deleteUserA<T extends Prisma.UserADeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserADeleteArgs>
  ): Promise<UserA> {
    return this.prisma.userA.delete(args);
  }

  async findMfes(
    parentId: string,
    args: Prisma.MfeFindManyArgs
  ): Promise<Mfe[]> {
    return this.prisma.userA
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mfes(args);
  }
}
